[{"title":"javascript this","date":"2018-05-23T16:00:00.000Z","path":"2018/05/24/js-this/","text":"一句话总结this的指向问题 this在有函数调用者时指向调用者否则指向GLOBAL，call、apply、bind除外。 function test(){ console.log(this); } test();/ /Window var th = [); test.call(th)/th test.apply(th)//th test.bind(th)//th var a = function(){ } a.test = test; a.test();//Function a a.prototype= { test : test } var b = new a(); b.test();//b; a.prototype.test()//a.prototye setTimeout(b.test, 100)//Window document.body.onclick = function(e){ b.test();//b test()://Window console.log(this)//document.body } function callMethod(callback){ callback();//Window arguments[0]();//arguments -&gt; arguments.0() } callMethod(b.test);","tags":[{"name":"js","slug":"js","permalink":"https://h7ml.coding.me/tags/js/"},{"name":"js this","slug":"js-this","permalink":"https://h7ml.coding.me/tags/js-this/"}]},{"title":"javascript数组方法总结","date":"2018-05-22T16:00:00.000Z","path":"2018/05/23/js-Array-method/","text":"数组创建第一种，使用 Array 构造函数： var arr1 = new Array(); //创建一个空数组 var arr2 = new Array(10); // 创建一个包含10项的数组 var arr3 = new Array(&quot;a&quot;, &quot;b&quot;,&quot;c&quot;); // 创建一个包含3个字符串的数组 第二种，使用数组字面量表示法： var arr1 = []; //创建一个空数组 var arr2 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]; // 创建一个包含3个字符串的数组 在读取和设置数组的值时，要使用方括号并提供相应值的基于 0 的数字索引： var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]; console.log(arr[0]); // a arr[2] = &quot;d&quot;; // 将下标为2的 c 修改为 d arr[3] = &quot;e&quot;; // 增加第四项为e JavaScript中数组的length属性是可以修改的 var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]; arr[arr.length] = &quot;d&quot;; // 在数组尾部添加一项&quot;d&quot; arr.length = arr.length-1; //将最后一项删除 如何判断一个变量是不是数组对象 var arr = []; // ES5之前 arr instanceof Array; // ES5新增 arr.isArray(); typeof arr; // object 数组方法join()join()：将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符，该方法只接收一个参数：即分隔符。 应用：通过join()方法可以实现重复字符串。 function repeatString(str, n) { return new Array(n + 1).join(str); } console.log(repeatString(&quot;a&quot;, 3)); // aaa push()和pop()push()：可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。 pop()：数组末尾移除最后一项，减少数组的 length 值，然后返回移除的项。 var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]; var count = arr.push(&quot;d&quot;, &quot;e&quot;); console.log(count); // 5 console.log(arr); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;] var item = arr.pop(); console.log(item); // e console.log(arr); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] shift() 和 unshift()shift()：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined 。unshift()：将参数添加到原数组开头，并返回数组的长度 。 var arr = [&quot;c&quot;, &quot;d&quot;, &quot;e&quot;]; var count = arr.unshift(&quot;a&quot;,&quot;b&quot;); console.log(count); // 5 console.log(arr); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;] var item = arr.shift(); console.log(item); // a console.log(arr); // [&quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;] sort()（原数组改变）sort()：按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。 在排序时，sort()方法会调用每个数组项的 toString()转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值， sort()方法比较的也是字符串。 var arr1 = [&quot;a&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;]; console.log(arr1.sort()); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] console.log(arr1); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] var arr2 = [15, 22, 46, 3]; console.log(arr2.sort()); // [15, 22, 3, 46] console.log(arr2); // [15, 22, 3, 46] 解决方法：sort()方法可以接收一个比较函数作为参数，比较函数接收两个参数，如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等则返回 0，如果第一个参数应该位于第二个之后则返回一个正数。 function compare(value1, value2) { if (value1 &lt; value2) { return -1; } else if (value1 &gt; value2) { return 1; } else { return 0; } } arr2 = [15, 22, 46, 3]; console.log(arr2.sort(compare)); // [3, 15, 22, 46] 如果需要通过比较函数产生降序排序的结果，只要交换比较函数返回的值即可。 function compare(value1, value2) { if (value1 &lt; value2) { return 1; } else if (value1 &gt; value2) { return -1; } else { return 0; } } arr2 = [15, 22, 46, 3]; console.log(arr2.sort(compare)); // [46, 22, 15, 3] reverse()（原数组改变）reverse()：反转数组项的顺序。 var arr = [15, 22, 46, 3]; console.log(arr.reverse()); // [3, 46, 22, 15] console.log(arr); // [3, 46, 22, 15] concat()concat()：将参数添加到原数组中。这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本。 传入的不是数组，则直接把参数添加到数组后面，如果传入的是数组，则将数组中的各个项添加到数组中。 var arr = [1, 3, 5, 7]; var arr1 = arr.concat(9, [11, 13]); console.log(arr1); // [1, 3, 5, 7, 9, 11, 13] console.log(arr); // [1, 3, 5, 7] 若传入的是一个二维数组。 var arr2 = arr.concat([9, [11, 13]]); console.log(arr2); // [1, 3, 5, 7, 9, Array[2]] console.log(arr2[5]); // [11, 13] slice()slice()：返回从原数组中指定开始下标到结束下标之间的项组成的新数组。可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。 var arr = [1, 3, 5, 7, 9, 11]; var arr1 = arr.slice(1); var arr2 = arr.slice(1, 4); var arr3 = arr.slice(1, -2); var arr4 = arr.slice(-4, -1); console.log(arr); // [1, 3, 5, 7, 9, 11] console.log(arr1); // [3, 5, 7, 9, 11] console.log(arr2); // [3, 5, 7] console.log(arr3); // [3, 5, 7] console.log(arr4); // [5, 7, 9] arr1只设置了一个参数，也就是起始下标为1，所以返回的数组为下标1（包括下标1）开始到数组最后。arr2设置了两个参数，返回起始下标（包括1）开始到终止下标（不包括4）的子数组。arr3设置了两个参数，终止下标为负数，当出现负数时，将负数加上数组长度的值（6）来替换该位置的数，因此就是从1开始到4（不包括）的子数组。arr4中两个参数都是负数，所以都加上数组长度6转换成正数，因此相当于slice(2, 5)。 splice()splice()：可以实现删除、插入和替换。 删除：可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如，splice(0,2)会删除数组中的前两项。 插入：可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项。例如，splice(2,0,4,6)会从当前数组的位置 2 开始插入4和6。 替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,4,6)会删除当前数组位置 2 的项，然后再从位置 2 开始插入4和6。 splice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项，如果没有删除任何项，则返回一个空数组。 var arr = [1, 3, 5, 7, 9, 11]; var arr1 = arr.splice(0, 2); console.log(arr); //[5, 7, 9, 11] console.log(arr1); //[1, 3] var arr2 = arr.splice(2, 0, 4, 6); console.log(arr); // [5, 7, 4, 6, 9, 11] console.log(arrR2); // [] var arr3 = arr.splice(1, 1, 2, 4); console.log(arr); // [5, 2, 4, 4, 6, 9, 11] console.log(arrR3); // [7] indexOf()和 lastIndexOf()indexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的开头（位置 0）开始向后查找。 lastIndexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的末尾开始向前查找。 这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回-1。在比较第一个参数与数组中的每一项时，会使用全等操作符。 var arr = [1, 3, 5, 7, 7, 5, 3, 1]; console.log(arr.indexOf(5)); // 2 console.log(arr.lastIndexOf(5)); // 5 console.log(arr.indexOf(5,2)); // 2 console.log(arr.lastIndexOf(5, 4)); // 2 console.log(arr.indexOf(&quot;5&quot;)); // -1 forEach()forEach()：对数组进行遍历循环，对数组中的每一项运行给定函数。这个方法没有返回值。参数都是function类型，默认有传参，参数分别为：值，索引。 var arr = [1, 2, 3]; arr.forEach(function(item, index){ console.log(index, item); }); // 0, 1 // 1, 2 // 2, 3 map()map()：指“映射”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。下面代码利用map方法实现数组中每个数求平方。 var arr = [1, 2, 3, 4]; var arr2 = arr.map(function(item){ return item*item; }); console.log(arr2); // [1, 4, 9, 16] filter()filter()：“过滤”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。 var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; var arr2 = arr.filter(function(x, index) { return index % 3 === 0 || x &gt;= 8; }); console.log(arr2); //[1, 4, 7, 8, 9, 10] every()every()：判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。 var arr = [1, 2, 3, 4, 5]; var arr2 = arr.every(function(x) { return x &lt; 10; }); console.log(arr2); // true var arr3 = arr.every(function(x) { return x &lt; 3; }); console.log(arr3); // false some()some()：判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。 var arr = [1, 2, 3, 4, 5]; var arr2 = arr.some(function(x) { return x &lt; 3; }); console.log(arr2); // true var arr3 = arr.some(function(x) { return x &lt; 1; }); console.log(arr3); // false reduce()和 reduceRight()这两个方法都会实现迭代数组的所有项，然后构建一个最终返回的值。 reduce()方法从数组的第一项开始，逐个遍历到最后。reduceRight()则从数组的最后一项开始，向前遍历到第一项。 这两个方法都接收两个参数：一个在每一项上调用的函数和（可选的）作为归并基础的初始值。 传给 reduce()和 reduceRight()的函数接收 4 个参数：前一个值、当前值、项的索引和数组对象。 这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。 下面代码用reduce()实现数组求和，数组一开始加了一个初始值10。 var values = [1, 2, 3, 4, 5]; var sum = values.reduceRight(function(prev, cur, index, array){ return prev + cur; }, 10); console.log(sum); //25 原文链接","tags":[{"name":"js","slug":"js","permalink":"https://h7ml.coding.me/tags/js/"},{"name":"js数组方法","slug":"js数组方法","permalink":"https://h7ml.coding.me/tags/js数组方法/"}]},{"title":"css单位总结","date":"2018-05-21T16:00:00.000Z","path":"2018/05/22/cssUnit/","text":"什么是css单位？1.关于css单位 可以看到css单位由和组成。2.在mdn中，css单位做了更为详尽的描述。可以总结为css单位的值有：数值丶百分比丶颜色丶坐标位置丶函数。一.数值单位：1.emem是一种相对单位，它相对于父元素的字体大小。 em常用于存在缩放需求时使用，比如在多行文本段落中，如果行高设置为line-height: 18px，如果文字的大小因为缩放发生改变，行高值是不会随之改变的，一直都是18px，如果将行高设置成一种相对值line-height: 1.2em，那么此时的行高值就会随着字体的大小改变而变化。 因为em是相对于父元素的字体大小，所以该单位存在明显的嵌套层级关系，浏览器默认的字体大小是16px，因此1em = 16px，需要注意的是chrome浏览器能够显示的最小字体是12px，当字体大小设置小于12px字体将按照12px显示。 2.remrem(root em)是一种相对单位，和em不同点是rem相对于根元素html的字体大小。 利用这个特性，我们常常使用rem单位进行移动端页面的布局。 rem布局的本质是等比缩放，一般是基于宽度。 最简单设置rem基准值的方法。 document.addEventListener(&#39;DOMContentLoaded&#39;, function (e) { var rem = window.innerWidth / 10 + &#39;px&#39;; document.getElementsByTagName(&#39;html&#39;)[0].style.fontSize = rem; }) 使用scss将px转换为rem值 @function px2rem ($px) { $rem: 75px; @return ($px / $rem) + rem; } 二.百分比：1.百分比单位 基于包含块的宽度来计算的属性：margin，padding，width，max-width，min-width，left，right，text-indent. 注意 1.margin-top，margin-bottom，padding-top和padding-bottom都是基于包含块的width属性来计算的。 2.text-indent：定义基于父元素宽度的百分比的缩进。当外层不指定宽度时，ie下会基于浏览器宽度。 基于包含块的高度来计算的属性：top，bottom，height，max-height，min-height 关于包含块（containing block）的概念，不能简单地理解成是父元素。如果是静态定位和相对定位，包含块一般就是其父元素。但是对于绝对定位的元素，包含块应该是离它最近的 position 为 absolute、relative、或者 fixed 的祖先元素。对固定定位的元素，它的包含块是视口（viewport 基于当前字体大小来计算的属性：line-height background-size还可以取预定义的值：contain，cover，auto。 2.百分比继承如果某个元素设置了百分比的属性，则后代元素继承的是计算后的值。例如： p { font-size: 10px } p { line-height: 120% } / 120% of &#39;font-size&#39; / 那么p的子元素继承到的值是 line-height: 12px，而不是 line-height: 120%。 关于css中的继承： 样式层叠与继承是样式表中两个关键概念，浏览器会根据层叠和继承规则确定显示一个元素时各种样式属性采用的值。 并非所有的CSS属性都可以继承，这这方面有条经验可以参考：与元素外观（文字，颜色，字体等）相关的样式会被继承；与元素在页面上的布局相关的样式不会继承。此外，还可以使用inherit强行实施继承。","tags":[{"name":"css","slug":"css","permalink":"https://h7ml.coding.me/tags/css/"},{"name":"css单位","slug":"css单位","permalink":"https://h7ml.coding.me/tags/css单位/"}]},{"title":"Hello World","date":"2018-04-14T16:00:00.000Z","path":"2018/04/15/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","tags":[{"name":"hello word","slug":"hello-word","permalink":"https://h7ml.coding.me/tags/hello-word/"}]}]